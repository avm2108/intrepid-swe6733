version: 2.1

# orbs:
#   heroku: circleci/heroku@2.0.0

jobs:
  # deploy-backend:
  #   docker:
  #     - image: cimg/base:stable-20.04
  #   resource_class: small
  #   steps:
  #     - checkout
  #     - run:
  #         name: "Prepare backend for deployment"
  #         command: |
  #           cd backend
  #           ls -la
  #           git config --global init.defaultBranch main
  #           git init .
  #           git config user.name "CircleCI"
  #           git config user.email "deploy@circleci.com"
  #           git add . && git commit -m "Committing backend"
  #           echo "Deploying backend to Heroku"
  #           git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git main --force
  # deploy-frontend:
  #   docker:
  #     - image: cimg/base:stable-20.04
  #   resource_class: small
  #   steps:
  #     - checkout
  #     - run:
  #         name: "Prepare frontend for deployment"
  #         command: |
  #           cd frontend
  #           ls -la
  #           git config --global init.defaultBranch main
  #           git init .
  #           git config user.name "CircleCI"
  #           git config user.email "deploy@circleci.com"
  #           git add . && git commit -m "Committing frontend"
  #           echo "Deploying frontend to Heroku"
  #           git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_FRONTEND_APP_NAME.git main --force
  build-frontend:
    docker:
      - image: cimg/node:18.12.1
    resource_class: large
    working_directory: ~/project/
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package-lock.json" }}
            - v1-dependencies-
      - run: |
          cd frontend
          echo "Installing React dependencies"
          npm install
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package-lock.json" }}
  test-frontend:
    docker:
      - image: cimg/node:18.12.1
    resource_class: large
    working_directory: ~/project/frontend
    steps:
      # - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package-lock.json" }}
            - v1-dependencies-
      - run:
          name: "Install jest-junit"
          command: |
            npm install --save-dev jest-junit
      - run:
          name: Run tests with JUnit as reporter
          command: jest --ci --runInBand --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./test-results/
      - store_test_results:
          path: ./test-results/
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package-lock.json" }}
    # parallelism: 2
  build-backend:
    docker:
      - image: circleci/node:18.12.1
    resource_class: small
    working_directory: ~/project/
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package-lock.json" }}
            - v1-dependencies-
      - run: |
          cd backend
          echo "Installing backend dependencies"
          npm install
          # echo "Running backend tests"
          # npm test
      - store_test_results:
          path: ./test-results/
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package-lock.json" }}
    # parallelism: 2

workflows:
  build-test-frontend:
    jobs:
      - build-frontend
      - test-frontend:
          requires:
            - build-frontend
  build-test-backend:
    jobs:
      - build-backend



  # build-test-deploy-frontend:
  #   jobs:
  #     - build-frontend
  #     - deploy-frontend:
  #         requires:
  #           - build-frontend
  #         filters:
  #           branches:
  #             only:
  #               - main
  # build-test-deploy-backend:
  #   jobs:
  #     - build-backend
  #     - deploy-backend:
  #         requires:
  #           - build-backend
  #         filters:
  #           branches:
  #             only:
  #               - main
